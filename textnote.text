Absolutely! To set up Prometheus in your Kubernetes cluster, the most straightforward and robust method is to use the **kube-prometheus-stack** Helm chart. This approach not only installs Prometheus but also integrates Grafana, Alertmanager, and essential exporters, providing a comprehensive monitoring solution.

---

### 🚀 Step-by-Step Guide to Install Prometheus & Grafana

#### 1️⃣ Prerequisites

- **Helm 3** installed on your system.
- A running **Kubernetes cluster** with `kubectl` configured.
- Sufficient cluster resources (at least 2 CPUs and 2GB RAM recommended).

#### 2️⃣ Add the Prometheus Community Helm Repository

```bash
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
```

#### 3️⃣ Create a Dedicated Namespace for Monitoring

```bash
kubectl create namespace monitoring
```

#### 4️⃣ Install the kube-prometheus-stack

```bash
helm install prometheus-stack prometheus-community/kube-prometheus-stack \
  --namespace monitoring
```

This command deploys Prometheus, Grafana, Alertmanager, and related components into the `monitoring` namespace.

#### 5️⃣ Verify the Installation

Check the status of the pods to ensure all components are running:

```bash
kubectl get pods -n monitoring
```

You should see pods like `prometheus-prometheus-stack-kube-prome-0`, `grafana-xxxxxxxxxx-xxxxx`, and others in the `Running` state.

#### 6️⃣ Accessing Grafana Dashboard

To view the Grafana dashboard:

1. **Port-forward the Grafana service:**

   ```bash
   kubectl port-forward svc/prometheus-stack-grafana -n monitoring 3000:80
   ```

2. **Retrieve the Grafana admin password:**

   ```bash
   kubectl get secret --namespace monitoring prometheus-stack-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
   ```

3. **Open your browser and navigate to:** `http://localhost:3000`

   - **Username:** `admin`
   - **Password:** *(Use the password retrieved in the previous step)*

#### 7️⃣ Configure Prometheus to Scrape Your FastAPI Application

To enable Prometheus to collect metrics from your FastAPI application:

1. **Ensure your FastAPI app exposes metrics at `/metrics` using `prometheus_fastapi_instrumentator`:**

   ```python
   from prometheus_fastapi_instrumentator import Instrumentator

   app = FastAPI()
   Instrumentator().instrument(app).expose(app, endpoint="/metrics")
   ```

2. **Annotate your FastAPI service to be discoverable by Prometheus:**

   Modify your FastAPI service YAML to include the following annotations:

   ```yaml
   metadata:
     annotations:
       prometheus.io/scrape: "true"
       prometheus.io/path: "/metrics"
       prometheus.io/port: "8000"
   ```

   Replace `8000` with the port your FastAPI application is running on.

3. **Apply the updated service configuration:**

   ```bash
   kubectl apply -f your-fastapi-service.yaml
   ```

Prometheus will now automatically discover and scrape metrics from your FastAPI application.

---

### 📊 Visualizing Metrics in Grafana

Once Prometheus is collecting metrics:

1. **Access the Grafana dashboard** as described earlier.

2. **Add Prometheus as a data source:**

   - Navigate to **Configuration > Data Sources**.
   - Click **Add data source**.
   - Select **Prometheus**.
   - Set the URL to `http://prometheus-stack-prometheus.monitoring.svc.cluster.local:9090`.
   - Click **Save & Test**.

3. **Import dashboards:**

   - Navigate to **Create > Import**.
   - You can import community dashboards or create custom ones to visualize metrics like CPU usage, memory consumption, request rates, and more.

---

By following these steps, you'll have a robust monitoring setup for your Kubernetes cluster, allowing you to gain insights into your applications and infrastructure.

If you need assistance with setting up specific dashboards or configuring alerts, feel free to ask! 